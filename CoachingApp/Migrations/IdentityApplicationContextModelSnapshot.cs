// <auto-generated />
using System;
using CoachingApp.Implementations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoachingApp.Migrations
{
    [DbContext(typeof(IdentityApplicationContext))]
    partial class IdentityApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoachingApp.Identity.IdentityApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CoachingApp.Models.certificate", b =>
                {
                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("coachID")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("name", "coachID");

                    b.HasIndex("coachID");

                    b.ToTable("certificates");
                });

            modelBuilder.Entity("CoachingApp.Models.client", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("firstName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<bool?>("gender")
                        .HasColumnType("bit");

                    b.Property<double?>("height")
                        .HasColumnType("float");

                    b.Property<string>("image")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("lastName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("mobileNum")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("weight")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("client");
                });

            modelBuilder.Entity("CoachingApp.Models.Client_coach_Nsubscription", b =>
                {
                    b.Property<int>("clientID")
                        .HasColumnType("int");

                    b.Property<int>("coachID")
                        .HasColumnType("int");

                    b.Property<int>("subID")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("date");

                    b.Property<bool?>("accept")
                        .HasColumnType("bit");

                    b.Property<string>("comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.HasKey("clientID", "coachID", "subID", "startDate");

                    b.HasIndex("coachID");

                    b.HasIndex("subID");

                    b.ToTable("Client_coach_Nsubscription");
                });

            modelBuilder.Entity("CoachingApp.Models.Client_coach_WOsubscription", b =>
                {
                    b.Property<int>("clientID")
                        .HasColumnType("int");

                    b.Property<int>("coachID")
                        .HasColumnType("int");

                    b.Property<int>("subID")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("date");

                    b.Property<bool?>("accept")
                        .HasColumnType("bit");

                    b.Property<string>("comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.HasKey("clientID", "coachID", "subID", "startDate");

                    b.HasIndex("coachID");

                    b.HasIndex("subID");

                    b.ToTable("Client_coach_WOsubscription");
                });

            modelBuilder.Entity("CoachingApp.Models.client_meal_sub", b =>
                {
                    b.Property<int>("clientID")
                        .HasColumnType("int");

                    b.Property<int>("mealID")
                        .HasColumnType("int");

                    b.Property<int>("subID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.HasKey("clientID", "mealID", "subID", "date");

                    b.HasIndex("mealID");

                    b.HasIndex("subID");

                    b.ToTable("client_meal_sub");
                });

            modelBuilder.Entity("CoachingApp.Models.client_workout_sub", b =>
                {
                    b.Property<int>("clientID")
                        .HasColumnType("int");

                    b.Property<int>("workoutID")
                        .HasColumnType("int");

                    b.Property<int>("subID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.Property<string>("clientNotes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("clientID", "workoutID", "subID", "date");

                    b.HasIndex("subID");

                    b.HasIndex("workoutID");

                    b.ToTable("client_workout_sub");
                });

            modelBuilder.Entity("CoachingApp.Models.coach", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("country")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("firstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("gender")
                        .HasColumnType("bit");

                    b.Property<string>("image")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("lastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("mobileNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double?>("rating")
                        .HasColumnType("float");

                    b.Property<int?>("yearsExperience")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.Excercise", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("coachID")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("link")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("id");

                    b.HasIndex("coachID");

                    b.ToTable("Excercise");
                });

            modelBuilder.Entity("CoachingApp.Models.meal", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("coachID")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("id");

                    b.HasIndex("coachID");

                    b.ToTable("meal");
                });

            modelBuilder.Entity("CoachingApp.Models.nutrition_subscription", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("coachID")
                        .HasColumnType("int");

                    b.Property<int?>("duration")
                        .HasColumnType("int");

                    b.Property<int?>("price")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("coachID");

                    b.ToTable("nutrition_subscription");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("coachID")
                        .HasColumnType("int");

                    b.Property<int?>("duration")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("notes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("id");

                    b.HasIndex("coachID");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("CoachingApp.Models.workout_excercise", b =>
                {
                    b.Property<int>("workoutID")
                        .HasColumnType("int");

                    b.Property<int>("excerciseID")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("reps")
                        .HasColumnType("int");

                    b.Property<int?>("sets")
                        .HasColumnType("int");

                    b.HasKey("workoutID", "excerciseID");

                    b.HasIndex("excerciseID");

                    b.ToTable("workout_excercise");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout_Set", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("coachID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex("coachID");

                    b.ToTable("Workout_Sets");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout_Subscription", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("coachID")
                        .HasColumnType("int");

                    b.Property<int?>("duration")
                        .HasColumnType("int");

                    b.Property<int?>("price")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("coachID");

                    b.ToTable("Workout_Subscription");
                });

            modelBuilder.Entity("CoachingApp.Models.workouts_in_set", b =>
                {
                    b.Property<int>("workout_set_id")
                        .HasColumnType("int");

                    b.Property<int>("workoutID")
                        .HasColumnType("int");

                    b.Property<int>("rank")
                        .HasColumnType("int");

                    b.HasKey("workout_set_id", "workoutID")
                        .HasName("PK_workouts_in_sets_1");

                    b.HasIndex("workoutID");

                    b.ToTable("workouts_in_sets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CoachingApp.Models.certificate", b =>
                {
                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("certificates")
                        .HasForeignKey("coachID")
                        .IsRequired()
                        .HasConstraintName("FK_certificates_coach");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.client", b =>
                {
                    b.HasOne("CoachingApp.Identity.IdentityApplicationUser", "User")
                        .WithOne("Client")
                        .HasForeignKey("CoachingApp.Models.client", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachingApp.Models.Client_coach_Nsubscription", b =>
                {
                    b.HasOne("CoachingApp.Models.client", "client")
                        .WithMany("Client_coach_Nsubscriptions")
                        .HasForeignKey("clientID")
                        .IsRequired()
                        .HasConstraintName("FK_Client_coach_Nsubscription_client");

                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("Client_coach_Nsubscriptions")
                        .HasForeignKey("coachID")
                        .IsRequired()
                        .HasConstraintName("FK_Client_coach_Nsubscription_coach");

                    b.HasOne("CoachingApp.Models.nutrition_subscription", "sub")
                        .WithMany("Client_coach_Nsubscriptions")
                        .HasForeignKey("subID")
                        .IsRequired()
                        .HasConstraintName("FK_Client_coach_Nsubscription_nutrition_subscription");

                    b.Navigation("client");

                    b.Navigation("coach");

                    b.Navigation("sub");
                });

            modelBuilder.Entity("CoachingApp.Models.Client_coach_WOsubscription", b =>
                {
                    b.HasOne("CoachingApp.Models.client", "client")
                        .WithMany("Client_coach_WOsubscriptions")
                        .HasForeignKey("clientID")
                        .IsRequired()
                        .HasConstraintName("FK_Client_coach_WOsubscription_client");

                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("Client_coach_WOsubscriptions")
                        .HasForeignKey("coachID")
                        .IsRequired()
                        .HasConstraintName("FK_Client_coach_WOsubscription_coach");

                    b.HasOne("CoachingApp.Models.Workout_Subscription", "sub")
                        .WithMany("Client_coach_WOsubscriptions")
                        .HasForeignKey("subID")
                        .IsRequired()
                        .HasConstraintName("FK_Client_coach_WOsubscription_Workout_Subscription");

                    b.Navigation("client");

                    b.Navigation("coach");

                    b.Navigation("sub");
                });

            modelBuilder.Entity("CoachingApp.Models.client_meal_sub", b =>
                {
                    b.HasOne("CoachingApp.Models.client", "client")
                        .WithMany("client_meal_subs")
                        .HasForeignKey("clientID")
                        .IsRequired()
                        .HasConstraintName("FK_client_meal_sub_client");

                    b.HasOne("CoachingApp.Models.meal", "meal")
                        .WithMany("client_meal_subs")
                        .HasForeignKey("mealID")
                        .IsRequired()
                        .HasConstraintName("FK_client_meal_sub_meal");

                    b.HasOne("CoachingApp.Models.nutrition_subscription", "sub")
                        .WithMany("client_meal_subs")
                        .HasForeignKey("subID")
                        .IsRequired()
                        .HasConstraintName("FK_client_meal_sub_nutrition_subscription");

                    b.Navigation("client");

                    b.Navigation("meal");

                    b.Navigation("sub");
                });

            modelBuilder.Entity("CoachingApp.Models.client_workout_sub", b =>
                {
                    b.HasOne("CoachingApp.Models.client", "client")
                        .WithMany("client_workout_subs")
                        .HasForeignKey("clientID")
                        .IsRequired()
                        .HasConstraintName("FK_client_workout_sub_client");

                    b.HasOne("CoachingApp.Models.Workout_Subscription", "sub")
                        .WithMany("client_workout_subs")
                        .HasForeignKey("subID")
                        .IsRequired()
                        .HasConstraintName("FK_client_workout_sub_Workout_Subscription");

                    b.HasOne("CoachingApp.Models.Workout", "workout")
                        .WithMany("client_workout_subs")
                        .HasForeignKey("workoutID")
                        .IsRequired()
                        .HasConstraintName("FK_client_workout_sub_Workout");

                    b.Navigation("client");

                    b.Navigation("sub");

                    b.Navigation("workout");
                });

            modelBuilder.Entity("CoachingApp.Models.coach", b =>
                {
                    b.HasOne("CoachingApp.Identity.IdentityApplicationUser", "User")
                        .WithOne("Coaches")
                        .HasForeignKey("CoachingApp.Models.coach", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoachingApp.Models.Excercise", b =>
                {
                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("Excercises")
                        .HasForeignKey("coachID")
                        .HasConstraintName("FK_Excercise_coach");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.meal", b =>
                {
                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("meals")
                        .HasForeignKey("coachID")
                        .HasConstraintName("FK_meal_coach");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.nutrition_subscription", b =>
                {
                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("nutrition_subscriptions")
                        .HasForeignKey("coachID")
                        .HasConstraintName("FK_nutrition_subscription_coach");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout", b =>
                {
                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("Workouts")
                        .HasForeignKey("coachID")
                        .HasConstraintName("FK_Workout_coach");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.workout_excercise", b =>
                {
                    b.HasOne("CoachingApp.Models.Excercise", "excercise")
                        .WithMany("workout_excercises")
                        .HasForeignKey("excerciseID")
                        .IsRequired()
                        .HasConstraintName("FK_workout_excercise_Excercise");

                    b.HasOne("CoachingApp.Models.Workout", "workout")
                        .WithMany("workout_excercises")
                        .HasForeignKey("workoutID")
                        .IsRequired()
                        .HasConstraintName("FK_workout_excercise_Workout");

                    b.Navigation("excercise");

                    b.Navigation("workout");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout_Set", b =>
                {
                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("Workout_Sets")
                        .HasForeignKey("coachID")
                        .HasConstraintName("FK_Workout_Sets_coach");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout_Subscription", b =>
                {
                    b.HasOne("CoachingApp.Models.coach", "coach")
                        .WithMany("Workout_Subscriptions")
                        .HasForeignKey("coachID")
                        .HasConstraintName("FK_Workout_Subscription_coach");

                    b.Navigation("coach");
                });

            modelBuilder.Entity("CoachingApp.Models.workouts_in_set", b =>
                {
                    b.HasOne("CoachingApp.Models.Workout", "workout")
                        .WithMany("workouts_in_sets")
                        .HasForeignKey("workoutID")
                        .IsRequired()
                        .HasConstraintName("FK_workouts_in_sets_Workout");

                    b.HasOne("CoachingApp.Models.Workout_Set", "workout_set")
                        .WithMany("workouts_in_sets")
                        .HasForeignKey("workout_set_id")
                        .IsRequired()
                        .HasConstraintName("FK_workouts_in_sets_Workout_Sets");

                    b.Navigation("workout");

                    b.Navigation("workout_set");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoachingApp.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoachingApp.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingApp.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoachingApp.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoachingApp.Identity.IdentityApplicationUser", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Coaches");
                });

            modelBuilder.Entity("CoachingApp.Models.client", b =>
                {
                    b.Navigation("Client_coach_Nsubscriptions");

                    b.Navigation("Client_coach_WOsubscriptions");

                    b.Navigation("client_meal_subs");

                    b.Navigation("client_workout_subs");
                });

            modelBuilder.Entity("CoachingApp.Models.coach", b =>
                {
                    b.Navigation("Client_coach_Nsubscriptions");

                    b.Navigation("Client_coach_WOsubscriptions");

                    b.Navigation("Excercises");

                    b.Navigation("Workout_Sets");

                    b.Navigation("Workout_Subscriptions");

                    b.Navigation("Workouts");

                    b.Navigation("certificates");

                    b.Navigation("meals");

                    b.Navigation("nutrition_subscriptions");
                });

            modelBuilder.Entity("CoachingApp.Models.Excercise", b =>
                {
                    b.Navigation("workout_excercises");
                });

            modelBuilder.Entity("CoachingApp.Models.meal", b =>
                {
                    b.Navigation("client_meal_subs");
                });

            modelBuilder.Entity("CoachingApp.Models.nutrition_subscription", b =>
                {
                    b.Navigation("Client_coach_Nsubscriptions");

                    b.Navigation("client_meal_subs");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout", b =>
                {
                    b.Navigation("client_workout_subs");

                    b.Navigation("workout_excercises");

                    b.Navigation("workouts_in_sets");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout_Set", b =>
                {
                    b.Navigation("workouts_in_sets");
                });

            modelBuilder.Entity("CoachingApp.Models.Workout_Subscription", b =>
                {
                    b.Navigation("Client_coach_WOsubscriptions");

                    b.Navigation("client_workout_subs");
                });
#pragma warning restore 612, 618
        }
    }
}
